<template>
  <div>
    <el-dialog title="新增" v-model="addFormVisible" :close-on-click-modal="false">
      <el-form :model="addForm" :rules="addFormRules" ref="addForm">
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click.native="addFormVisible = false">取消</el-button>
        <el-button type="primary" @click.native="addSubmit" :loading="addLoading">提交</el-button>
      </div>
    </el-dialog>
  </div>
</template>
<script>
  import bus from '../../assets/js/eventBus'
  export default {
    data () {
      const validateChecked = (rule, value, callback) => {
        value ? callback() : callback(new Error('请勾选立即上线'))
      }
      const validateSelected = (rule, value, callback) => {
        value != '' ? callback() : callback(new Error('请选择关联广告'))
      }
      return {
        // 编辑界面是否显示
        addFormVisible: false,
        addLoading: false,
        // 编辑界面数据
        addForm: {
          adId: '',
          picURL: '',
          comment: '',
          checked: true,
          search: ''
        },
        addFormRules: {
          adId: [
            {required: true, trigger: 'blur', validator: validateSelected}
          ],
          picURL: [
            {required: true, message: '请上传图片', trigger: 'blur'}
          ],
          checked: [
            {required: true, trigger: 'blur', validator: validateChecked}
          ],
          onlineTaskEnd: [
            {required: true, message: '请设定下线时间', trigger: 'blur'}
          ]
        },
        headers: { authorization: localStorage.getItem('userId') },
        uploadParams: { cmarketMerchantId: '' },
        action: process.env.API_ROOT + '/engine-console/console/uploadFile/uploadPicture.do',
      }
    },
    methods: {
      addSubmit () {
        this.$refs.addForm.validate((valid) => {
          if (valid) {
            this.$confirm('确认提交吗？', '提示', {}).then(() => {
              this.addLoading = true
            })
          } else {
            console.log('error submit!!')
            return false
          }
        })
      },
      handleUploadSuccess (res, file) {
        if (res.code == 200) {
          this.previewPic = URL.createObjectURL(file.raw)
          this.editForm.picURL = res.data
        } else {
          this.$message({
            message: res.message,
            type: 'error'
          })
        }
      }
    },
    computed: {
      // 任性的自己写个模糊查询
      searchOptions () {
        let vm = this
        let search = vm.editForm.search
        if (search) {
          search = search.toLowerCase()
          let searchData = []
          for (let i = 0; i < vm.options.length; i++) {
            if (vm.options[i].name.toLowerCase().indexOf(search) > -1) {
              searchData.push(vm.options[i])
            }
          }
          return searchData
        } else {
          return vm.options
        }
      }
    },
    mounted () {
      var vm = this
      bus.$on('handleEditBox', function (message) {
        vm.editFormVisible = message
      })
      vm.searMerchantAd()
    },
    watch: {
      addFormVisible (val) {
        if (!val) {
          this.$refs['addForm'].resetFields()
        }
      }
    }
  }
</script>

<style  lang="less" rel="stylesheet/less" scoped>
  .uploader-icon {
    font-size: 28px;
    color: #8c939d;
    width: 120px !important;
    height: 120px !important;
    line-height: 120px !important;
    text-align: center;
    border: 1px dashed #c0ccda;
    background-color: #fbfdff;
  }
  .pic-container {
    float: left;
    width: 232px;
  }

  .comment-container {
    float: left;
    width: 50%;
  }

  .search {
    float: left;
    width: 40%;
    min-width: 160px;
    margin-left: 15px;
  }

  .clearfix {
    *zoom: 1;
    &:before,
    &:after {
      display: table;
      content: "";
      line-height: 0;
    }
    &:after {
       clear: both;
    }
  }
</style>
